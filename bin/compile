#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

BUILD_DIR=$1
CACHE_DIR=$2
BIN_DIR=$(cd "$(dirname "$0")"; pwd) # absolute path


TEXLIVE_REPOSITORY="http://mirror.ctan.org/systems/texlive/tlnet"

# TODO: remove this in future versions.
# This is only kept for backwards support
if [ -f "$BUILD_DIR/.texlive-repository" ]; then
    TEXLIVE_REPOSITORY=$(cat "$BUILD_DIR/.texlive-repository")
fi

# Optional: use custom path to texlive installer
if [ -f "$BUILD_DIR/texlive.repository" ]; then
    TEXLIVE_REPOSITORY=$(cat "$BUILD_DIR/texlive.repository")
fi

TEXLIVE_INSTALLER_URL="$TEXLIVE_REPOSITORY/install-tl-unx.tar.gz"
TEXLIVE_SHA512_URL="$TEXLIVE_INSTALLER_URL.sha512"

TEXLIVE_HOME=$BUILD_DIR/.texlive
TEXLIVE_CACHE=$CACHE_DIR/.texlive
PATH=$TEXLIVE_HOME/bin/x86_64-linux:$PATH
PROFILE_D=$BUILD_DIR/.profile.d/texlive.sh

# Output helpers
# shellcheck source=bin/utils
source "$BIN_DIR/utils"

# Prepare the various paths
mkdir -p "$TEXLIVE_HOME"
mkdir -p "$TEXLIVE_CACHE"
mkdir -p "$(dirname "$PROFILE_D")"

if [ "$(ls -A "$TEXLIVE_CACHE")" ]; then
    build-step "Setting up build cache..."
    cp -R "$TEXLIVE_CACHE/"* "$TEXLIVE_HOME"
fi

if [ ! -f "$TEXLIVE_HOME/install-tl" ]; then
    build-step "Downloading install-tl..."
    build-step "Using $TEXLIVE_INSTALLER_URL"
    build-step "Using $TEXLIVE_SHA512_URL"

    # Download SHA512 checksum and installer
    curl "$TEXLIVE_SHA512_URL" -L -s -o "/tmp/install-tl-unx.tar.gz.sha512"
    curl "$TEXLIVE_INSTALLER_URL" -L -s -o "/tmp/install-tl-unx.tar.gz"
    
    # Verify SHA512 checksum
    cd /tmp
    ACTUAL_HASH=$(shasum -a 512 install-tl-unx.tar.gz | awk '{print $1}')
    EXPECTED_HASH=$(cat install-tl-unx.tar.gz.sha512 | awk '{print $1}')

    build-step "Actual hash: $ACTUAL_HASH"
    build-step "Expected hash: $EXPECTED_HASH"

    if [ $ACTUAL_HASH -ne $EXPECTED_HASH ]; then
        build-warn "SHA512 Prüfung fehlgeschlagen! Das Installationspaket könnte manipuliert worden sein."
        exit 1
    fi
    
    # Extract if checksum verification passed
    tar --strip-components=1 -xzf /tmp/install-tl-unx.tar.gz -C "$TEXLIVE_HOME"
    
    # Cleanup
    rm /tmp/install-tl-unx.tar.gz /tmp/install-tl-unx.tar.gz.sha512

    cd -
fi

if [ ! "$(which pdflatex)" ]; then
    build-step "Installing TeX Live..."

    PROF=$BIN_DIR/../conf/texlive.profile
    {
      echo "TEXDIR $TEXLIVE_HOME";
      echo "TEXMFCONFIG $TEXLIVE_HOME/var/texmf-config";
      echo "TEXMFHOME $TEXLIVE_HOME/var/texmf";
      echo "TEXMFLOCAL $TEXLIVE_HOME/texmf-local";
      echo "TEXMFSYSCONFIG $TEXLIVE_HOME/texmf-config";
      echo "TEXMFSYSVAR $TEXLIVE_HOME/texmf-var";
      echo "TEXMFVAR $TEXLIVE_HOME/var/texmf-var";
    } >> "$PROF"

    cd "$TEXLIVE_HOME"

    ./install-tl --repository="$TEXLIVE_REPOSITORY" --profile="$PROF"
fi

build-step "Updating TeX Live..."

tlmgr option repository "$TEXLIVE_REPOSITORY"
tlmgr update --self

# install user-provided-packages
if [ -f "$BUILD_DIR/texlive.packages" ]; then
    build-step "Installing custom packages..."
    # shellcheck disable=SC2046
    tlmgr install $(cat "$BUILD_DIR/texlive.packages")
fi

build-step "Updating installed packages..."
tlmgr update --all

build-step "Cleaning up temporary files..."
# Make sure the cache is empty
rm -rf "${TEXLIVE_CACHE:?}/"*

build-step "Caching..."
# Store a copy of it in the cache so it doesn't have to be fetched again
cp -R "$TEXLIVE_HOME/"* "$TEXLIVE_CACHE/"

# Check for an essential binary to make sure it's installed
if [ ! "$(which pdflatex)" ]; then
    build-warn "TeX Live installation failed"
    exit 1
fi

# Set up the environment for runtimes now that compilation has finished
# shellcheck disable=SC2016
echo 'export PATH=$HOME/.texlive/bin/x86_64-linux:$PATH' > "$PROFILE_D"

build-step "TeX Live installation successful!"
